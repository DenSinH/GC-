#ifndef GC__SHADER_H
#define GC__SHADER_H

// fragmentShaderSource (from fragment.vert, lines 0 to 11)
const char* fragmentShaderSource = 
"#version 400 core\n"
"out vec4 FragColor;\n"
"in vec4 vertexColor;\n"
"\n"
"void main()\n"
"{\n"
"    FragColor = vec4(vertexColor);\n"
"}\n";


// vertexShaderSource (from vertex.vert, lines 0 to 118)
const char* vertexShaderSource = 
"#version 430 core\n"
"const uint draw_arg_POS = 9;\n"
"\n"
"uniform uint VCD_lo, VCD_hi;\n"
"uniform uint VAT_A;\n"
"uniform uint VAT_B;\n"
"uniform uint VAT_C;\n"
"\n"
"// here, the array is read as little endian\n"
"const int extract_offset[4] = { 0, 8, 16, 24 };\n"
"\n"
"#define READ8(array, address) (bitfieldExtract(array[address >> 2], extract_offset[(address) & 3], 8));\n"
"#define READ8s(array, address) (bitfieldExtract(int(array[address >> 2]), extract_offset[(address) & 3], 8));\n"
"\n"
"// layout corresponds to that in GX_constants.h\n"
"layout (location = 0) in uint index;\n"
"\n"
"layout (std430, binding = 3) buffer ssbo\n"
"{\n"
"    uint vertices;\n"
"    uint vertex_stride;\n"
"    int arg_offsets[21];\n"
"    int data_offsets[12];\n"
"    uint _;  // data_size: I don't actually need this in the shader\n"
"    uint args[0x1140 >> 2];     // todo: generalize this\n"
"    uint data[];\n"
"};\n"
"\n"
"out vec4 vertexColor;\n"
"\n"
"void main()\n"
"{\n"
"    uint draw_arg;\n"
"    uint arg_offset;\n"
"    uint data_offset;\n"
"\n"
"    int x, y, z;\n"
"    {\n"
"        /* determine vertex position */\n"
"        // todo: different cases (right now only i8 indexed rgba8888\n"
"        // initial values\n"
"        draw_arg = 9;\n"
"        arg_offset = arg_offsets[draw_arg];\n"
"        arg_offset += gl_VertexID * vertex_stride;\n"
"        // todo: signed offset, 16bit offset\n"
"        uint vertex_index = READ8(args, arg_offset);\n"
"\n"
"        data_offset = data_offsets[draw_arg - draw_arg_POS];\n"
"\n"
"        // todo: generalize strides\n"
"        x = READ8s(data, data_offset + (vertex_index * 6));\n"
"        x <<= 8;\n"
"        x |= READ8s(data, data_offset + (vertex_index * 6) + 1);\n"
"        x <<= 16;\n"
"        x >>= 16;\n"
"\n"
"        y = READ8s(data, data_offset + (vertex_index * 6) + 2);\n"
"        y <<= 8;\n"
"        y |= READ8s(data, data_offset + (vertex_index * 6) + 3);\n"
"        y <<= 16;\n"
"        y >>= 16;\n"
"\n"
"        z = READ8s(data, data_offset + (vertex_index * 6) + 4);\n"
"        z <<= 8;\n"
"        z |= READ8s(data, data_offset + (vertex_index * 6) + 5);\n"
"        z <<= 16;\n"
"        z >>= 16;\n"
"\n"
"        gl_Position = vec4(x / 32.0, y / 32.0, z / 32.0, 1.0);\n"
"//        switch (gl_VertexID) {\n"
"//            case 4:\n"
"//                gl_Position = vec4(-0.5, -0.5, 0.0, 1.0);\n"
"//                break;\n"
"//            case 5:\n"
"//                gl_Position = vec4(0.5, -0.5, 0.0, 1.0);\n"
"//                break;\n"
"//            case 6:\n"
"//                gl_Position = vec4(0.0, 0.5, 0.0, 1.0);\n"
"//                break;\n"
"//            case 7:\n"
"//                gl_Position = vec4(0.5, 0.5, 0.0, 1.0);\n"
"//                break;\n"
"//            default:\n"
"//                gl_Position = vec4(x / 32.0, y / 32.0, z / 32.0, 1.0);\n"
"//                break;\n"
"//        }\n"
"    }\n"
"\n"
"    {\n"
"        /* determine vertex color */\n"
"        // todo: different cases (right now only i8 indexed rgba8888\n"
"        // initial values\n"
"        draw_arg = 11;\n"
"        arg_offset = arg_offsets[draw_arg];\n"
"        arg_offset += gl_VertexID * vertex_stride;\n"
"        // todo: signed offset\n"
"        uint color_index = READ8(args, arg_offset);\n"
"\n"
"        data_offset = data_offsets[draw_arg - draw_arg_POS];\n"
"\n"
"        uint r, g, b;\n"
"        // todo: generalize strides\n"
"        r = READ8(data, data_offset + (color_index << 2));\n"
"        g = READ8(data, data_offset + (color_index << 2) + 1);\n"
"        b = READ8(data, data_offset + (color_index << 2) + 2);\n"
"\n"
"        vertexColor = vec4(r / 255.0, g / 255.0, b / 255.0, 1.0);\n"
"//        if (z == 0) {\n"
"//            vertexColor = vec4(0.0, 1.0, 0.0, 1.0);\n"
"//        }\n"
"//        else {\n"
"//            vertexColor = vec4(1.0, 0.0, 0.0, 1.0);\n"
"//        }\n"
"    }\n"
"}\n";

#endif  // GC__SHADER_H